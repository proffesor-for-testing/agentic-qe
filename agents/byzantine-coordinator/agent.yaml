name: byzantine-coordinator
version: "1.0.0"
description: "Byzantine fault-tolerant consensus coordinator with malicious actor detection and recovery"
category: consensus
author: aqe-framework
model: claude-sonnet-4
temperature: 0.1
max_tokens: 8192
pactLevel: 4

metadata:
  type: "distributed-coordinator"
  pact_level: 4
  fault_tolerance: "byzantine"
  consensus_algorithm: "practical-byzantine-fault-tolerance"

capabilities:
  - byzantine_fault_tolerance
  - malicious_actor_detection
  - consensus_coordination
  - fault_recovery
  - network_partitioning_resilience
  - cryptographic_verification
  - performance_monitoring
  - audit_logging

parameters:
  byzantine_threshold:
    type: "integer"
    default: 1
    description: "Maximum number of Byzantine faults tolerable (f < n/3)"
    validation: "f < floor(n/3)"

  consensus_timeout:
    type: "duration"
    default: "30s"
    description: "Maximum time to wait for consensus"

  view_change_timeout:
    type: "duration"
    default: "60s"
    description: "Timeout for view change operations"

  signature_verification:
    type: "boolean"
    default: true
    description: "Enable cryptographic signature verification"

  malicious_detection_threshold:
    type: "float"
    default: 0.3
    description: "Threshold for detecting malicious behavior"

triggers:
  - event: "consensus_required"
    condition: "distributed_decision_needed"
    priority: "critical"

  - event: "byzantine_fault_detected"
    condition: "malicious_behavior_observed"
    priority: "critical"

  - event: "network_partition"
    condition: "communication_failure"
    priority: "high"

  - event: "view_change_needed"
    condition: "primary_failure_detected"
    priority: "high"

hooks:
  pre_consensus:
    - validate_participants
    - check_network_health
    - initialize_consensus_round
    - setup_cryptographic_context

  during_consensus:
    - monitor_participant_behavior
    - detect_byzantine_faults
    - validate_message_signatures
    - track_consensus_progress

  post_consensus:
    - verify_consensus_result
    - update_participant_reputation
    - log_consensus_metrics
    - trigger_recovery_if_needed

algorithms:
  pbft:
    phases:
      - pre_prepare: "Primary broadcasts proposal"
      - prepare: "Replicas validate and prepare"
      - commit: "Replicas commit if 2f+1 prepare messages"
    requirements:
      - minimum_nodes: "3f + 1"
      - signature_verification: true
      - view_change_protocol: true

  malicious_detection:
    behaviors:
      - conflicting_messages: "Sending different messages to different nodes"
      - timing_attacks: "Deliberately delaying messages"
      - invalid_signatures: "Sending messages with invalid signatures"
      - view_change_attacks: "Triggering unnecessary view changes"

    detection_methods:
      - message_comparison: "Compare messages across nodes"
      - timing_analysis: "Analyze message timing patterns"
      - signature_validation: "Verify all cryptographic signatures"
      - behavior_scoring: "Score participant behavior over time"

workflows:
  consensus_workflow:
    steps:
      - step: "initialize_consensus"
        description: "Initialize new consensus round"
        actions:
          - select_primary
          - broadcast_view_number
          - reset_timers

      - step: "pre_prepare_phase"
        description: "Primary broadcasts proposal"
        actions:
          - validate_proposal
          - sign_proposal
          - broadcast_to_replicas

      - step: "prepare_phase"
        description: "Replicas prepare proposal"
        actions:
          - validate_pre_prepare
          - broadcast_prepare_message
          - collect_prepare_messages
          - check_prepare_threshold

      - step: "commit_phase"
        description: "Replicas commit proposal"
        actions:
          - broadcast_commit_message
          - collect_commit_messages
          - check_commit_threshold
          - execute_proposal

      - step: "finalize_consensus"
        description: "Finalize consensus result"
        actions:
          - update_state
          - notify_participants
          - log_consensus_result

  fault_recovery_workflow:
    steps:
      - step: "detect_fault"
        description: "Detect Byzantine or crash fault"
        actions:
          - analyze_behavior_patterns
          - check_message_consistency
          - validate_signatures

      - step: "isolate_faulty_node"
        description: "Isolate detected faulty node"
        actions:
          - mark_node_as_faulty
          - exclude_from_consensus
          - update_participant_list

      - step: "trigger_view_change"
        description: "Trigger view change if needed"
        actions:
          - broadcast_view_change
          - collect_view_change_messages
          - select_new_primary

      - step: "resume_consensus"
        description: "Resume consensus with remaining nodes"
        actions:
          - reinitialize_consensus
          - update_fault_tolerance_parameters
          - continue_normal_operation

monitoring:
  metrics:
    - consensus_latency
    - throughput_tps
    - fault_detection_accuracy
    - view_change_frequency
    - message_overhead
    - cryptographic_verification_time

  alerts:
    - byzantine_fault_detected
    - consensus_timeout_exceeded
    - view_change_cascade
    - network_partition_detected
    - signature_verification_failure

error_handling:
  timeout_handling:
    - consensus_timeout: "trigger_view_change"
    - prepare_timeout: "resend_prepare_message"
    - commit_timeout: "resend_commit_message"

  fault_handling:
    - byzantine_fault: "isolate_and_continue"
    - crash_fault: "update_participant_list"
    - network_partition: "wait_for_majority_partition"

  recovery_strategies:
    - state_synchronization: "sync_with_majority"
    - checkpoint_recovery: "restore_from_last_checkpoint"
    - view_change_recovery: "complete_pending_view_change"

integration:
  dependencies:
    - cryptographic_service
    - network_communication_layer
    - state_management_service
    - monitoring_service

  interfaces:
    - consensus_api: "REST/gRPC interface for consensus operations"
    - monitoring_api: "Metrics and health endpoints"
    - configuration_api: "Dynamic parameter adjustment"

  compliance:
    - security_standards: ["FIPS-140-2", "Common Criteria"]
    - audit_logging: "Comprehensive operation logging"
    - data_protection: "Encrypted communication and storage"