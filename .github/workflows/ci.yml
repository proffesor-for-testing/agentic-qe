name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, typescript-implementation ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # TypeScript compilation and linting
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation
      run: npm run build

    - name: Run ESLint
      run: npm run lint

    - name: Type checking
      run: npm run typecheck

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --testPathPattern=unit --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: npm test -- --testPathPattern=integration
      timeout-minutes: 10

  # Agent verification
  agent-verification:
    name: Verify All Agents
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify agent implementations
      run: npm run verify

    - name: Check agent count
      run: |
        AGENT_COUNT=$(find src/agents -name "*.ts" ! -name "index.ts" ! -name "base-agent.ts" | wc -l)
        echo "Found $AGENT_COUNT agents"
        if [ $AGENT_COUNT -lt 39 ]; then
          echo "Error: Expected at least 39 agents, found $AGENT_COUNT"
          exit 1
        fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate || true

    - name: Run security scan with Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        node -e "
        const start = Date.now();
        require('./dist/index.js');
        const duration = Date.now() - start;
        console.log(\`Initialization time: \${duration}ms\`);
        if (duration > 5000) {
          console.error('Performance regression detected');
          process.exit(1);
        }
        "

  # Documentation build
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate TypeDoc documentation
      run: |
        npm install --save-dev typedoc
        npx typedoc --out docs/api src/agents --name "Agentic QE API Documentation"
      continue-on-error: true

  # Release preparation (only on main branch)
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, agent-verification, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Create release artifacts
      run: |
        mkdir -p release
        cp -r dist release/
        cp package.json package-lock.json README.md LICENSE release/
        tar -czf agentic-qe-release.tar.gz release/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: agentic-qe-release.tar.gz
        retention-days: 30

  # Matrix testing summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, agent-verification]
    if: always()

    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- Agent Verification: ${{ needs.agent-verification.result }}"

        if [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.agent-verification.result }}" != "success" ]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi