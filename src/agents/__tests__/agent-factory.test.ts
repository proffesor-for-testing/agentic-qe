import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { DefaultAgentFactory, createAgentFactory, agentFactory } from '../agent-factory';\nimport { Agent, AgentFactoryConfig } from '../../types/agent';\n\ndescribe('AgentFactory', () => {\n  let tempDir: string;\n  let factory: DefaultAgentFactory;\n  let agentsDir: string;\n\n  beforeEach(async () => {\n    // Create temporary directory for test agents\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'agent-factory-test-'));\n    agentsDir = path.join(tempDir, 'agents');\n    await fs.ensureDir(agentsDir);\n\n    // Create test agent definitions\n    await createTestAgents();\n\n    factory = createAgentFactory(agentsDir);\n  });\n\n  afterEach(async () => {\n    await factory.destroy();\n    await fs.remove(tempDir);\n  });\n\n  async function createTestAgents() {\n    // Create test-agent-1\n    const agent1Dir = path.join(agentsDir, 'test-agent-1');\n    await fs.ensureDir(agent1Dir);\n    await fs.writeFile(path.join(agent1Dir, 'agent.yaml'), `\nname: test-agent-1\nversion: \"1.0.0\"\ndescription: \"Test agent for boundary testing\"\ncategory: \"testing\"\ncapabilities:\n  - boundary_testing\n  - test_generation\ntools:\n  - name: boundary_value_analysis\n    description: \"Generate boundary test cases\"\n    parameters:\n      field_spec:\n        type: object\n        description: \"Field specification\"\nsystem_prompt: |\n  You are a test agent specialized in boundary testing.\n`);\n\n    // Create test-agent-2\n    const agent2Dir = path.join(agentsDir, 'test-agent-2');\n    await fs.ensureDir(agent2Dir);\n    await fs.writeFile(path.join(agent2Dir, 'agent.yaml'), `\nname: test-agent-2\nversion: \"1.0.0\"\ndescription: \"Test agent for security testing\"\ncategory: \"security\"\ncapabilities:\n  - security_testing\n  - vulnerability_assessment\ntools:\n  - name: security_scan\n    description: \"Perform security scanning\"\nsystem_prompt: |\n  You are a security testing agent.\n`);\n\n    // Create invalid agent (for error testing)\n    const invalidAgentDir = path.join(agentsDir, 'invalid-agent');\n    await fs.ensureDir(invalidAgentDir);\n    await fs.writeFile(path.join(invalidAgentDir, 'agent.yaml'), `\ninvalid_yaml: [\n  unclosed_array\n`);\n  }\n\n  describe('Agent Discovery', () => {\n    it('should discover available agents', async () => {\n      const agents = await factory.getAvailableAgents();\n      expect(agents).toContain('test-agent-1');\n      expect(agents).toContain('test-agent-2');\n      expect(agents).not.toContain('invalid-agent'); // Should be filtered out\n    });\n\n    it('should cache available agents', async () => {\n      const agents1 = await factory.getAvailableAgents();\n      const agents2 = await factory.getAvailableAgents();\n      expect(agents1).toEqual(agents2);\n    });\n\n    it('should refresh cache when requested', async () => {\n      await factory.getAvailableAgents();\n      \n      // Add new agent\n      const newAgentDir = path.join(agentsDir, 'new-agent');\n      await fs.ensureDir(newAgentDir);\n      await fs.writeFile(path.join(newAgentDir, 'agent.yaml'), `\nname: new-agent\nversion: \"1.0.0\"\ndescription: \"Newly added agent\"\ncategory: \"testing\"\ncapabilities:\n  - new_capability\n`);\n\n      await factory.refreshAgentsCache();\n      const agents = await factory.getAvailableAgents();\n      expect(agents).toContain('new-agent');\n    });\n  });\n\n  describe('Agent Definition Loading', () => {\n    it('should load valid agent definition', async () => {\n      const yamlPath = path.join(agentsDir, 'test-agent-1', 'agent.yaml');\n      const definition = await factory.loadDefinition(yamlPath);\n      \n      expect(definition.name).toBe('test-agent-1');\n      expect(definition.capabilities).toContain('boundary_testing');\n      expect(definition.tools).toHaveLength(1);\n    });\n\n    it('should cache loaded definitions', async () => {\n      const yamlPath = path.join(agentsDir, 'test-agent-1', 'agent.yaml');\n      \n      const definition1 = await factory.loadDefinition(yamlPath);\n      const definition2 = await factory.loadDefinition(yamlPath);\n      \n      expect(definition1).toBe(definition2); // Should be same cached object\n    });\n\n    it('should throw error for invalid YAML', async () => {\n      const yamlPath = path.join(agentsDir, 'invalid-agent', 'agent.yaml');\n      \n      await expect(factory.loadDefinition(yamlPath))\n        .rejects.toThrow(/Failed to load agent definition/);\n    });\n\n    it('should throw error for non-existent file', async () => {\n      const yamlPath = path.join(agentsDir, 'non-existent', 'agent.yaml');\n      \n      await expect(factory.loadDefinition(yamlPath))\n        .rejects.toThrow();\n    });\n  });\n\n  describe('Agent Creation', () => {\n    it('should create agent from definition', async () => {\n      const definition = await factory.loadDefinition(\n        path.join(agentsDir, 'test-agent-1', 'agent.yaml')\n      );\n      \n      const agent = await factory.createAgent(definition);\n      \n      expect(agent.name).toBe('test-agent-1');\n      expect(agent.capabilities).toContain('boundary_testing');\n      expect(agent.state).toBe('initialized');\n      expect(agent.id).toBeDefined();\n    });\n\n    it('should create agent from file path', async () => {\n      const yamlPath = path.join(agentsDir, 'test-agent-2', 'agent.yaml');\n      const agent = await factory.createFromFile(yamlPath);\n      \n      expect(agent.name).toBe('test-agent-2');\n      expect(agent.capabilities).toContain('security_testing');\n    });\n\n    it('should create agent from name', async () => {\n      const agent = await factory.createFromName('test-agent-1');\n      \n      expect(agent.name).toBe('test-agent-1');\n      expect(agent.capabilities).toContain('boundary_testing');\n    });\n\n    it('should apply overrides when creating agent', async () => {\n      const overrides: Partial<Agent> = {\n        capabilities: ['custom_capability'],\n        temperature: 0.8\n      };\n      \n      const agent = await factory.createFromName('test-agent-1', overrides);\n      \n      expect(agent.capabilities).toContain('custom_capability');\n      expect(agent.definition.temperature).toBe(0.8);\n    });\n\n    it('should register created agents', async () => {\n      const agent = await factory.createFromName('test-agent-1');\n      const registry = factory.getRegistry();\n      \n      expect(registry.get(agent.id)).toBe(agent);\n      expect(registry.getByName(agent.name)).toBe(agent);\n    });\n\n    it('should throw error for non-existent agent', async () => {\n      await expect(factory.createFromName('non-existent-agent'))\n        .rejects.toThrow(/not found/);\n    });\n  });\n\n  describe('Multiple Agent Creation', () => {\n    it('should create multiple agents successfully', async () => {\n      const agentNames = ['test-agent-1', 'test-agent-2'];\n      const agents = await factory.createMultipleAgents(agentNames);\n      \n      expect(agents).toHaveLength(2);\n      expect(agents[0].name).toBe('test-agent-1');\n      expect(agents[1].name).toBe('test-agent-2');\n    });\n\n    it('should handle partial failures gracefully', async () => {\n      const agentNames = ['test-agent-1', 'non-existent-agent', 'test-agent-2'];\n      const agents = await factory.createMultipleAgents(agentNames);\n      \n      expect(agents).toHaveLength(2); // Only successful creations\n      expect(agents.map(a => a.name)).toEqual(['test-agent-1', 'test-agent-2']);\n    });\n\n    it('should apply individual overrides', async () => {\n      const agentNames = ['test-agent-1', 'test-agent-2'];\n      const overrides = {\n        'test-agent-1': { temperature: 0.8 },\n        'test-agent-2': { temperature: 0.2 }\n      };\n      \n      const agents = await factory.createMultipleAgents(agentNames, overrides);\n      \n      expect(agents[0].definition.temperature).toBe(0.8);\n      expect(agents[1].definition.temperature).toBe(0.2);\n    });\n  });\n\n  describe('Capability-based Agent Finding', () => {\n    beforeEach(async () => {\n      // Create agents first\n      await factory.createFromName('test-agent-1');\n      await factory.createFromName('test-agent-2');\n    });\n\n    it('should find agents by capabilities', async () => {\n      const agents = await factory.findAgentsByCapabilities(['boundary_testing']);\n      \n      expect(agents).toContain('test-agent-1');\n      expect(agents).not.toContain('test-agent-2');\n    });\n\n    it('should find agents with multiple capabilities', async () => {\n      const agents = await factory.findAgentsByCapabilities(['security_testing', 'vulnerability_assessment']);\n      \n      expect(agents).toContain('test-agent-2');\n    });\n\n    it('should return empty array for non-matching capabilities', async () => {\n      const agents = await factory.findAgentsByCapabilities(['non_existent_capability']);\n      \n      expect(agents).toHaveLength(0);\n    });\n  });\n\n  describe('Agent Cloning', () => {\n    it('should clone existing agent with overrides', async () => {\n      const originalAgent = await factory.createFromName('test-agent-1');\n      const overrides: Partial<Agent> = {\n        temperature: 0.9,\n        capabilities: ['cloned_capability']\n      };\n      \n      const clonedAgent = await factory.cloneAgent(originalAgent.id, overrides);\n      \n      expect(clonedAgent.id).not.toBe(originalAgent.id);\n      expect(clonedAgent.name).toBe(originalAgent.name);\n      expect(clonedAgent.definition.temperature).toBe(0.9);\n      expect(clonedAgent.capabilities).toContain('cloned_capability');\n    });\n\n    it('should throw error for non-existent source agent', async () => {\n      await expect(factory.cloneAgent('non-existent-id'))\n        .rejects.toThrow(/not found in registry/);\n    });\n  });\n\n  describe('Factory Statistics', () => {\n    it('should provide factory statistics', async () => {\n      await factory.createFromName('test-agent-1');\n      await factory.createFromName('test-agent-2');\n      \n      const stats = factory.getFactoryStats();\n      \n      expect(stats.registeredAgents).toBe(2);\n      expect(stats.availableAgents).toBeGreaterThanOrEqual(2);\n      expect(stats.registryStats).toBeDefined();\n    });\n  });\n\n  describe('Factory Destruction', () => {\n    it('should destroy all agents and clean up resources', async () => {\n      const agent1 = await factory.createFromName('test-agent-1');\n      const agent2 = await factory.createFromName('test-agent-2');\n      \n      await factory.destroy();\n      \n      const registry = factory.getRegistry();\n      expect(registry.list()).toHaveLength(0);\n    });\n  });\n\n  describe('Event Emission', () => {\n    it('should emit agent creation events', async () => {\n      const events: any[] = [];\n      factory.on('agent_created', (event) => events.push(event));\n      \n      await factory.createFromName('test-agent-1');\n      \n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('created');\n      expect(events[0].agentName).toBe('test-agent-1');\n    });\n\n    it('should forward agent events', async () => {\n      const events: any[] = [];\n      factory.on('agent_initialized', (event) => events.push(event));\n      \n      await factory.createFromName('test-agent-1');\n      \n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('initialized');\n    });\n  });\n});\n\ndescribe('AgentFactoryBuilder', () => {\n  let tempDir: string;\n\n  beforeEach(async () => {\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'factory-builder-test-'));\n  });\n\n  afterEach(async () => {\n    await fs.remove(tempDir);\n  });\n\n  it('should build factory with configuration', () => {\n    const factory = agentFactory()\n      .agentsDirectory(tempDir)\n      .defaultModel('claude-3-opus')\n      .defaultTemperature(0.7)\n      .enableHooks(true)\n      .build();\n    \n    expect(factory).toBeInstanceOf(DefaultAgentFactory);\n  });\n\n  it('should throw error without agents directory', () => {\n    expect(() => {\n      agentFactory().build();\n    }).toThrow(/Agents directory is required/);\n  });\n});\n\ndescribe('Factory Configuration', () => {\n  let tempDir: string;\n\n  beforeEach(async () => {\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'factory-config-test-'));\n  });\n\n  afterEach(async () => {\n    await fs.remove(tempDir);\n  });\n\n  it('should apply custom configuration', () => {\n    const config: AgentFactoryConfig = {\n      agentsDirectory: tempDir,\n      defaultModel: 'custom-model',\n      defaultTemperature: 0.5,\n      defaultMaxTokens: 2048,\n      enableHooks: false,\n      enableStateManagement: false,\n      enableEventEmission: false\n    };\n    \n    const factory = new DefaultAgentFactory(config);\n    expect(factory).toBeInstanceOf(DefaultAgentFactory);\n  });\n});\n"