import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as os from 'os';\nimport {\n  quickStartFactory,\n  createAgentTeam,\n  findBestAgentForTask,\n  executeTaskWithBestAgent,\n  getSystemStatus,\n  cleanup,\n  createAgentFactory\n} from '../index';\nimport { DefaultAgentFactory } from '../agent-factory';\n\ndescribe('Agent Factory Index Integration', () => {\n  let tempDir: string;\n  let agentsDir: string;\n\n  beforeEach(async () => {\n    // Create temporary directory for test agents\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'agent-index-test-'));\n    agentsDir = path.join(tempDir, 'agents');\n    await fs.ensureDir(agentsDir);\n\n    // Create test agent definitions\n    await createTestAgents();\n  });\n\n  afterEach(async () => {\n    await fs.remove(tempDir);\n  });\n\n  async function createTestAgents() {\n    // Create boundary testing agent\n    const boundaryAgentDir = path.join(agentsDir, 'boundary-tester');\n    await fs.ensureDir(boundaryAgentDir);\n    await fs.writeFile(path.join(boundaryAgentDir, 'agent.yaml'), `\nname: boundary-tester\nversion: \"1.0.0\"\ndescription: \"Specialized in boundary value analysis and edge case testing\"\ncategory: \"testing\"\ncapabilities:\n  - boundary_testing\n  - test_generation\n  - edge_case_analysis\ntools:\n  - name: boundary_value_analysis\n    description: \"Generate boundary test cases\"\n    parameters:\n      field_spec:\n        type: object\n        description: \"Field specification\"\nsystem_prompt: |\n  You are a boundary testing specialist focused on finding edge cases and boundary conditions.\n`);\n\n    // Create security testing agent\n    const securityAgentDir = path.join(agentsDir, 'security-scanner');\n    await fs.ensureDir(securityAgentDir);\n    await fs.writeFile(path.join(securityAgentDir, 'agent.yaml'), `\nname: security-scanner\nversion: \"1.0.0\"\ndescription: \"Security vulnerability assessment and penetration testing\"\ncategory: \"security\"\ncapabilities:\n  - security_testing\n  - vulnerability_assessment\n  - penetration_testing\ntools:\n  - name: security_scan\n    description: \"Perform security scanning\"\nsystem_prompt: |\n  You are a security testing agent specializing in vulnerability assessment.\n`);\n\n    // Create performance testing agent\n    const performanceAgentDir = path.join(agentsDir, 'performance-analyzer');\n    await fs.ensureDir(performanceAgentDir);\n    await fs.writeFile(path.join(performanceAgentDir, 'agent.yaml'), `\nname: performance-analyzer\nversion: \"1.0.0\"\ndescription: \"Performance testing and bottleneck analysis\"\ncategory: \"performance\"\ncapabilities:\n  - performance_testing\n  - load_testing\n  - bottleneck_analysis\nsystem_prompt: |\n  You are a performance testing agent focused on identifying bottlenecks and optimization opportunities.\n`);\n\n    // Create API testing agent\n    const apiAgentDir = path.join(agentsDir, 'api-validator');\n    await fs.ensureDir(apiAgentDir);\n    await fs.writeFile(path.join(apiAgentDir, 'agent.yaml'), `\nname: api-validator\nversion: \"1.0.0\"\ndescription: \"API testing and integration validation\"\ncategory: \"integration\"\ncapabilities:\n  - api_testing\n  - integration_testing\n  - contract_testing\n  - boundary_testing\nsystem_prompt: |\n  You are an API testing agent specializing in integration and contract validation.\n`);\n  }\n\n  describe('quickStartFactory', () => {\n    it('should initialize factory and discover agents', async () => {\n      const { factory, availableAgents, registry, toolExecutor } = await quickStartFactory(agentsDir);\n      \n      expect(factory).toBeInstanceOf(DefaultAgentFactory);\n      expect(availableAgents).toContain('boundary-tester');\n      expect(availableAgents).toContain('security-scanner');\n      expect(availableAgents).toContain('performance-analyzer');\n      expect(availableAgents).toContain('api-validator');\n      expect(registry).toBeDefined();\n      expect(toolExecutor).toBeDefined();\n      \n      await factory.destroy();\n    });\n\n    it('should handle empty agents directory', async () => {\n      const emptyDir = path.join(tempDir, 'empty');\n      await fs.ensureDir(emptyDir);\n      \n      const { factory, availableAgents } = await quickStartFactory(emptyDir);\n      \n      expect(factory).toBeInstanceOf(DefaultAgentFactory);\n      expect(availableAgents).toHaveLength(0);\n      \n      await factory.destroy();\n    });\n  });\n\n  describe('createAgentTeam', () => {\n    let factory: DefaultAgentFactory;\n\n    beforeEach(async () => {\n      factory = createAgentFactory(agentsDir);\n    });\n\n    afterEach(async () => {\n      await factory.destroy();\n    });\n\n    it('should create multiple agents successfully', async () => {\n      const agentNames = ['boundary-tester', 'security-scanner', 'performance-analyzer'];\n      const { agents, errors } = await createAgentTeam(factory, agentNames);\n      \n      expect(agents).toHaveLength(3);\n      expect(errors).toHaveLength(0);\n      expect(agents.map(a => a.name)).toEqual(expect.arrayContaining(agentNames));\n    });\n\n    it('should handle partial failures gracefully', async () => {\n      const agentNames = ['boundary-tester', 'non-existent-agent', 'security-scanner'];\n      const { agents, errors } = await createAgentTeam(factory, agentNames);\n      \n      expect(agents).toHaveLength(2);\n      expect(errors).toHaveLength(1);\n      expect(errors[0].name).toBe('non-existent-agent');\n      expect(agents.map(a => a.name)).toEqual(expect.arrayContaining(['boundary-tester', 'security-scanner']));\n    });\n\n    it('should apply individual overrides', async () => {\n      const agentNames = ['boundary-tester', 'security-scanner'];\n      const overrides = {\n        'boundary-tester': { temperature: 0.8 },\n        'security-scanner': { temperature: 0.2 }\n      };\n      \n      const { agents, errors } = await createAgentTeam(factory, agentNames, overrides);\n      \n      expect(agents).toHaveLength(2);\n      expect(errors).toHaveLength(0);\n      expect(agents.find(a => a.name === 'boundary-tester')?.definition.temperature).toBe(0.8);\n      expect(agents.find(a => a.name === 'security-scanner')?.definition.temperature).toBe(0.2);\n    });\n  });\n\n  describe('findBestAgentForTask', () => {\n    let factory: DefaultAgentFactory;\n\n    beforeEach(async () => {\n      factory = createAgentFactory(agentsDir);\n      // Create agents for testing\n      await factory.createFromName('boundary-tester');\n      await factory.createFromName('security-scanner');\n      await factory.createFromName('performance-analyzer');\n      await factory.createFromName('api-validator');\n    });\n\n    afterEach(async () => {\n      await factory.destroy();\n    });\n\n    it('should find agent based on task description', async () => {\n      const { agent, score, reasoning } = await findBestAgentForTask(\n        factory,\n        'Generate boundary test cases for user input validation'\n      );\n      \n      expect(agent).toBeDefined();\n      expect(agent!.capabilities.some(cap => cap.includes('boundary') || cap.includes('test'))).toBe(true);\n      expect(score).toBeGreaterThan(0);\n      expect(reasoning).toContain('task description analysis');\n    });\n\n    it('should find agent based on required capabilities', async () => {\n      const { agent, score, reasoning } = await findBestAgentForTask(\n        factory,\n        'Perform comprehensive security assessment',\n        ['security_testing', 'vulnerability_assessment']\n      );\n      \n      expect(agent).toBeDefined();\n      expect(agent!.name).toBe('security-scanner');\n      expect(score).toBeGreaterThan(0);\n      expect(reasoning).toContain('capability match');\n    });\n\n    it('should handle API testing with boundary requirements', async () => {\n      const { agent, score, reasoning } = await findBestAgentForTask(\n        factory,\n        'Validate API endpoints with boundary testing',\n        ['api_testing', 'boundary_testing']\n      );\n      \n      expect(agent).toBeDefined();\n      expect(agent!.name).toBe('api-validator'); // Has both capabilities\n      expect(score).toBeGreaterThan(0);\n    });\n\n    it('should return null for empty registry', async () => {\n      const emptyFactory = createAgentFactory(agentsDir);\n      \n      const { agent, score, reasoning } = await findBestAgentForTask(\n        emptyFactory,\n        'Any task',\n        ['any_capability']\n      );\n      \n      expect(agent).toBeNull();\n      expect(score).toBe(0);\n      expect(reasoning).toContain('No agents available');\n      \n      await emptyFactory.destroy();\n    });\n\n    it('should handle non-matching capabilities', async () => {\n      const { agent, score, reasoning } = await findBestAgentForTask(\n        factory,\n        'Perform database testing',\n        ['database_testing', 'sql_injection_testing']\n      );\n      \n      expect(agent).toBeNull();\n      expect(score).toBe(0);\n      expect(reasoning).toContain('No agents found with required capabilities');\n    });\n  });\n\n  describe('executeTaskWithBestAgent', () => {\n    let factory: DefaultAgentFactory;\n\n    beforeEach(async () => {\n      factory = createAgentFactory(agentsDir);\n      // Create agents for testing\n      await factory.createFromName('boundary-tester');\n      await factory.createFromName('security-scanner');\n      await factory.createFromName('api-validator');\n    });\n\n    afterEach(async () => {\n      await factory.destroy();\n    });\n\n    it('should execute task with best agent', async () => {\n      const result = await executeTaskWithBestAgent(\n        factory,\n        'Generate boundary test cases for age field (0-120)',\n        ['boundary_testing']\n      );\n      \n      expect(result.success).toBe(true);\n      expect(result.agentUsed).toBeDefined();\n      expect(result.result).toBeDefined();\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('should execute task with context parameters', async () => {\n      const context = {\n        fieldSpec: {\n          name: 'age',\n          type: 'integer',\n          min: 0,\n          max: 120\n        }\n      };\n      \n      const result = await executeTaskWithBestAgent(\n        factory,\n        'Perform boundary value analysis',\n        ['boundary_testing'],\n        context\n      );\n      \n      expect(result.success).toBe(true);\n      expect(result.result).toBeDefined();\n    });\n\n    it('should handle task execution without specific capabilities', async () => {\n      const result = await executeTaskWithBestAgent(\n        factory,\n        'Analyze application for potential improvements'\n      );\n      \n      expect(result.success).toBe(true);\n      expect(result.agentUsed).toBeDefined();\n    });\n\n    it('should handle execution errors gracefully', async () => {\n      const result = await executeTaskWithBestAgent(\n        factory,\n        'Perform impossible task',\n        ['non_existent_capability']\n      );\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('should handle empty agent registry', async () => {\n      const emptyFactory = createAgentFactory(agentsDir);\n      \n      const result = await executeTaskWithBestAgent(\n        emptyFactory,\n        'Any task',\n        ['any_capability']\n      );\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toContain('No agents available');\n      \n      await emptyFactory.destroy();\n    });\n  });\n\n  describe('getSystemStatus', () => {\n    let factory: DefaultAgentFactory;\n\n    beforeEach(async () => {\n      factory = createAgentFactory(agentsDir);\n      await factory.createFromName('boundary-tester');\n      await factory.createFromName('security-scanner');\n    });\n\n    afterEach(async () => {\n      await factory.destroy();\n    });\n\n    it('should provide comprehensive system status', () => {\n      const status = getSystemStatus(factory);\n      \n      expect(status.factory).toBeDefined();\n      expect(status.registry).toBeDefined();\n      expect(status.health).toBeDefined();\n      \n      expect(status.factory.registeredAgents).toBe(2);\n      expect(status.registry.totalAgents).toBe(2);\n      expect(status.health.healthy).toBe(true);\n    });\n\n    it('should show factory statistics', () => {\n      const status = getSystemStatus(factory);\n      \n      expect(status.factory.registeredAgents).toBeGreaterThan(0);\n      expect(status.factory.availableAgents).toBeGreaterThan(0);\n      expect(status.factory.registryStats).toBeDefined();\n    });\n\n    it('should show registry health', () => {\n      const status = getSystemStatus(factory);\n      \n      expect(status.health.totalAgents).toBeGreaterThan(0);\n      expect(status.health.initializedAgents).toBeGreaterThan(0);\n      expect(status.health.issues).toHaveLength(0);\n    });\n  });\n\n  describe('cleanup', () => {\n    it('should cleanup factory resources', async () => {\n      const factory = createAgentFactory(agentsDir);\n      await factory.createFromName('boundary-tester');\n      \n      expect(factory.getRegistry().list()).toHaveLength(1);\n      \n      await cleanup(factory);\n      \n      // After cleanup, registry should be empty\n      expect(factory.getRegistry().list()).toHaveLength(0);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle non-existent agents directory', async () => {\n      const nonExistentDir = path.join(tempDir, 'non-existent');\n      \n      const { factory, availableAgents } = await quickStartFactory(nonExistentDir);\n      \n      expect(factory).toBeInstanceOf(DefaultAgentFactory);\n      expect(availableAgents).toHaveLength(0);\n      \n      await factory.destroy();\n    });\n\n    it('should handle corrupted agent files gracefully', async () => {\n      // Create corrupted agent file\n      const corruptedDir = path.join(agentsDir, 'corrupted-agent');\n      await fs.ensureDir(corruptedDir);\n      await fs.writeFile(path.join(corruptedDir, 'agent.yaml'), 'invalid: yaml: content: [');\n      \n      const { factory, availableAgents } = await quickStartFactory(agentsDir);\n      \n      // Should still work with other valid agents\n      expect(availableAgents.length).toBeGreaterThan(0);\n      expect(availableAgents).not.toContain('corrupted-agent');\n      \n      await factory.destroy();\n    });\n\n    it('should handle concurrent operations safely', async () => {\n      const factory = createAgentFactory(agentsDir);\n      \n      // Create multiple agents concurrently\n      const creationPromises = [\n        factory.createFromName('boundary-tester'),\n        factory.createFromName('security-scanner'),\n        factory.createFromName('performance-analyzer'),\n        factory.createFromName('api-validator')\n      ];\n      \n      const agents = await Promise.all(creationPromises);\n      expect(agents).toHaveLength(4);\n      \n      // Execute tasks concurrently\n      const executionPromises = agents.map(agent => \n        agent.execute('Concurrent task execution test')\n      );\n      \n      const results = await Promise.all(executionPromises);\n      expect(results.every(r => r.success)).toBe(true);\n      \n      await factory.destroy();\n    });\n  });\n\n  describe('Real-world Scenarios', () => {\n    let factory: DefaultAgentFactory;\n\n    beforeEach(async () => {\n      factory = createAgentFactory(agentsDir);\n    });\n\n    afterEach(async () => {\n      await factory.destroy();\n    });\n\n    it('should handle comprehensive testing workflow', async () => {\n      // Create a team for comprehensive testing\n      const { agents } = await createAgentTeam(factory, [\n        'boundary-tester',\n        'security-scanner',\n        'api-validator'\n      ]);\n      \n      expect(agents).toHaveLength(3);\n      \n      // Execute different types of testing tasks\n      const tasks = [\n        {\n          description: 'Generate boundary test cases for user registration form',\n          capabilities: ['boundary_testing'],\n          expectedAgent: 'boundary-tester'\n        },\n        {\n          description: 'Perform security vulnerability assessment',\n          capabilities: ['security_testing'],\n          expectedAgent: 'security-scanner'\n        },\n        {\n          description: 'Validate API contract compliance',\n          capabilities: ['api_testing'],\n          expectedAgent: 'api-validator'\n        }\n      ];\n      \n      for (const task of tasks) {\n        const result = await executeTaskWithBestAgent(\n          factory,\n          task.description,\n          task.capabilities\n        );\n        \n        expect(result.success).toBe(true);\n        expect(result.agentUsed).toBeDefined();\n        expect(result.result).toBeDefined();\n      }\n    });\n\n    it('should handle complex capability matching', async () => {\n      await factory.createFromName('boundary-tester');\n      await factory.createFromName('api-validator');\n      \n      // API validator has both api_testing and boundary_testing\n      const { agent } = await findBestAgentForTask(\n        factory,\n        'Test API endpoints with boundary value analysis',\n        ['api_testing', 'boundary_testing']\n      );\n      \n      expect(agent?.name).toBe('api-validator');\n      expect(agent?.capabilities).toContain('api_testing');\n      expect(agent?.capabilities).toContain('boundary_testing');\n    });\n\n    it('should demonstrate end-to-end quality engineering workflow', async () => {\n      // Step 1: Quick start and discovery\n      const { factory: qeFactory, availableAgents } = await quickStartFactory(agentsDir);\n      expect(availableAgents.length).toBeGreaterThan(0);\n      \n      // Step 2: Create specialized team\n      const { agents } = await createAgentTeam(qeFactory, [\n        'boundary-tester',\n        'security-scanner',\n        'performance-analyzer',\n        'api-validator'\n      ]);\n      expect(agents).toHaveLength(4);\n      \n      // Step 3: Execute comprehensive testing suite\n      const testSuite = [\n        'Generate boundary test cases for all input fields',\n        'Perform security vulnerability scan',\n        'Analyze performance bottlenecks',\n        'Validate API contract compliance'\n      ];\n      \n      const results = await Promise.all(\n        testSuite.map(task => executeTaskWithBestAgent(qeFactory, task))\n      );\n      \n      expect(results.every(r => r.success)).toBe(true);\n      \n      // Step 4: Get system status\n      const status = getSystemStatus(qeFactory);\n      expect(status.health.healthy).toBe(true);\n      expect(status.registry.totalAgents).toBe(4);\n      \n      // Step 5: Cleanup\n      await cleanup(qeFactory);\n      expect(qeFactory.getRegistry().list()).toHaveLength(0);\n    });\n  });\n});\n"