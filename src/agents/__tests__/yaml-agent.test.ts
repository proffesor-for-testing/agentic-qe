import { YamlAgent } from '../yaml-agent';\nimport { DefaultToolExecutor } from '../tool-executor';\nimport { Agent } from '../../types/agent';\n\ndescribe('YamlAgent', () => {\n  let toolExecutor: DefaultToolExecutor;\n  let testAgentDefinition: Agent;\n\n  beforeEach(() => {\n    toolExecutor = new DefaultToolExecutor();\n    \n    testAgentDefinition = {\n      name: 'test-yaml-agent',\n      version: '1.0.0',\n      description: 'Test YAML agent',\n      category: 'testing',\n      capabilities: ['boundary_testing', 'test_generation'],\n      tools: [\n        {\n          name: 'boundary_value_analysis',\n          description: 'Generate boundary test cases',\n          parameters: {\n            field_spec: {\n              type: 'object',\n              description: 'Field specification'\n            }\n          }\n        }\n      ],\n      parameters: {\n        max_test_cases: {\n          type: 'integer',\n          default: 10,\n          description: 'Maximum number of test cases'\n        }\n      },\n      states: {\n        created: {\n          description: 'Initial state',\n          transitions: [\n            { to: 'initialized', trigger: 'initialize' }\n          ]\n        },\n        initialized: {\n          description: 'Ready for work',\n          transitions: [\n            { to: 'working', trigger: 'start_task' }\n          ]\n        },\n        working: {\n          description: 'Executing task',\n          transitions: [\n            { to: 'initialized', trigger: 'task_complete' }\n          ]\n        }\n      },\n      hooks: {\n        pre_task: ['validate_inputs', 'prepare_environment'],\n        post_task: ['cleanup_resources', 'log_results']\n      },\n      system_prompt: 'You are a testing agent specialized in boundary value analysis.'\n    };\n  });\n\n  describe('Agent Creation', () => {\n    it('should create agent with basic properties', () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      expect(agent.name).toBe('test-yaml-agent');\n      expect(agent.type).toBe('testing');\n      expect(agent.capabilities).toEqual(['boundary_testing', 'test_generation']);\n      expect(agent.id).toBeDefined();\n      expect(agent.state).toBe('created');\n    });\n\n    it('should apply overrides', () => {\n      const overrides: Partial<Agent> = {\n        temperature: 0.8,\n        capabilities: ['custom_capability']\n      };\n      \n      const agent = new YamlAgent(testAgentDefinition, toolExecutor, overrides);\n      \n      expect(agent.definition.temperature).toBe(0.8);\n      expect(agent.capabilities).toEqual(['custom_capability']);\n    });\n\n    it('should initialize tools map', () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      expect(agent.tools.size).toBe(1);\n      expect(agent.tools.has('boundary_value_analysis')).toBe(true);\n    });\n\n    it('should initialize parameters with defaults', () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      expect(agent.parameters.max_test_cases).toBe(10);\n    });\n\n    it('should set initial state from states definition', () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      expect(agent.state).toBe('created');\n    });\n  });\n\n  describe('Agent Initialization', () => {\n    it('should initialize successfully', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      await agent.initialize();\n      \n      expect(agent.state).toBe('initialized');\n    });\n\n    it('should not initialize twice', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      await agent.initialize();\n      await agent.initialize(); // Should not throw\n      \n      expect(agent.state).toBe('initialized');\n    });\n\n    it('should emit initialization event', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      const events: any[] = [];\n      \n      agent.on('initialized', (event) => events.push(event));\n      \n      await agent.initialize();\n      \n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('initialized');\n    });\n\n    it('should throw error if already destroyed', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      await agent.destroy();\n      \n      await expect(agent.initialize())\n        .rejects.toThrow(/has been destroyed/);\n    });\n  });\n\n  describe('Task Execution', () => {\n    let agent: YamlAgent;\n\n    beforeEach(async () => {\n      agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n    });\n\n    it('should execute task successfully', async () => {\n      const result = await agent.execute('Generate boundary test cases for user age field');\n      \n      expect(result.success).toBe(true);\n      expect(result.agentId).toBe(agent.id);\n      expect(result.duration).toBeGreaterThan(0);\n      expect(result.result).toBeDefined();\n    });\n\n    it('should emit task events', async () => {\n      const events: any[] = [];\n      agent.on('task_started', (event) => events.push(event));\n      agent.on('task_completed', (event) => events.push(event));\n      \n      await agent.execute('Test task');\n      \n      expect(events).toHaveLength(2);\n      expect(events[0].type).toBe('task_started');\n      expect(events[1].type).toBe('task_completed');\n    });\n\n    it('should handle task execution errors', async () => {\n      // Create agent with invalid tool configuration to force error\n      const invalidDefinition = {\n        ...testAgentDefinition,\n        tools: [\n          {\n            name: 'invalid_tool',\n            description: 'This tool will fail'\n          }\n        ]\n      };\n      \n      const invalidAgent = new YamlAgent(invalidDefinition, toolExecutor);\n      await invalidAgent.initialize();\n      \n      const result = await invalidAgent.execute('This should fail');\n      \n      expect(result.success).toBe(true); // Should still succeed with fallback analysis\n      expect(result.result).toBeDefined();\n    });\n\n    it('should throw error if not initialized', async () => {\n      const uninitializedAgent = new YamlAgent(testAgentDefinition, toolExecutor);\n      \n      await expect(uninitializedAgent.execute('Test task'))\n        .rejects.toThrow(/is not initialized/);\n    });\n\n    it('should throw error if destroyed', async () => {\n      await agent.destroy();\n      \n      await expect(agent.execute('Test task'))\n        .rejects.toThrow(/has been destroyed/);\n    });\n\n    it('should include context in execution', async () => {\n      const context = { testParameter: 'value' };\n      const result = await agent.execute('Test task', context);\n      \n      expect(result.metadata.context).toEqual(context);\n    });\n  });\n\n  describe('State Management', () => {\n    let agent: YamlAgent;\n\n    beforeEach(async () => {\n      agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n    });\n\n    it('should change state successfully', () => {\n      agent.setState('working');\n      \n      expect(agent.state).toBe('working');\n    });\n\n    it('should emit state change event', () => {\n      const events: any[] = [];\n      agent.on('state_changed', (event) => events.push(event));\n      \n      agent.setState('working');\n      \n      expect(events).toHaveLength(1);\n      expect(events[0].data.newState).toBe('working');\n    });\n\n    it('should validate state transitions', () => {\n      // Try invalid transition\n      agent.setState('invalid_state');\n      \n      // Should remain in current state\n      expect(agent.state).toBe('initialized');\n    });\n  });\n\n  describe('Tool Management', () => {\n    let agent: YamlAgent;\n\n    beforeEach(async () => {\n      agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n    });\n\n    it('should get tool by name', () => {\n      const tool = agent.getTool('boundary_value_analysis');\n      \n      expect(tool).toBeDefined();\n      expect(tool?.name).toBe('boundary_value_analysis');\n    });\n\n    it('should return undefined for non-existent tool', () => {\n      const tool = agent.getTool('non_existent_tool');\n      \n      expect(tool).toBeUndefined();\n    });\n\n    it('should return capabilities list', () => {\n      const capabilities = agent.getCapabilities();\n      \n      expect(capabilities).toEqual(['boundary_testing', 'test_generation']);\n      expect(capabilities).not.toBe(agent.capabilities); // Should be a copy\n    });\n  });\n\n  describe('Agent Destruction', () => {\n    it('should destroy agent cleanly', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n      \n      await agent.destroy();\n      \n      expect(agent.tools.size).toBe(0);\n    });\n\n    it('should emit destruction event', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n      \n      const events: any[] = [];\n      agent.on('destroyed', (event) => events.push(event));\n      \n      await agent.destroy();\n      \n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('destroyed');\n    });\n\n    it('should not destroy twice', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n      \n      await agent.destroy();\n      await agent.destroy(); // Should not throw\n    });\n  });\n\n  describe('Task Analysis', () => {\n    let agent: YamlAgent;\n\n    beforeEach(async () => {\n      agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n    });\n\n    it('should classify testing tasks correctly', async () => {\n      const result = await agent.execute('Generate test cases for API validation');\n      \n      expect(result.result.task_analysis.task_type).toBe('testing');\n    });\n\n    it('should assess task complexity', async () => {\n      const simpleResult = await agent.execute('Test');\n      const complexResult = await agent.execute('Generate comprehensive test suite with boundary value analysis, equivalence partitioning, and error path testing for a complex multi-tier application with multiple APIs and database interactions');\n      \n      expect(simpleResult.result.task_analysis.complexity).toBe('low');\n      expect(complexResult.result.task_analysis.complexity).toBe('high');\n    });\n\n    it('should identify applicable capabilities', async () => {\n      const result = await agent.execute('Perform boundary testing on user input fields');\n      \n      expect(result.result.task_analysis.applicable_capabilities).toContain('boundary_testing');\n    });\n  });\n\n  describe('System Prompt Integration', () => {\n    it('should use system prompt for task interpretation', async () => {\n      const agent = new YamlAgent(testAgentDefinition, toolExecutor);\n      await agent.initialize();\n      \n      const result = await agent.execute('Analyze boundary conditions');\n      \n      expect(result.result.system_prompt_analysis).toBeDefined();\n      expect(result.result.system_prompt_analysis.agent_perspective).toContain('boundary_testing');\n    });\n  });\n});\n\ndescribe('YamlAgent Edge Cases', () => {\n  let toolExecutor: DefaultToolExecutor;\n\n  beforeEach(() => {\n    toolExecutor = new DefaultToolExecutor();\n  });\n\n  it('should handle agent without tools', async () => {\n    const definition: Agent = {\n      name: 'simple-agent',\n      version: '1.0.0',\n      description: 'Simple agent without tools',\n      category: 'basic'\n    };\n    \n    const agent = new YamlAgent(definition, toolExecutor);\n    await agent.initialize();\n    \n    const result = await agent.execute('Simple task');\n    expect(result.success).toBe(true);\n  });\n\n  it('should handle agent without capabilities', async () => {\n    const definition: Agent = {\n      name: 'capability-less-agent',\n      version: '1.0.0',\n      description: 'Agent without capabilities',\n      category: 'basic'\n    };\n    \n    const agent = new YamlAgent(definition, toolExecutor);\n    await agent.initialize();\n    \n    expect(agent.capabilities).toEqual([]);\n    expect(agent.getCapabilities()).toEqual([]);\n  });\n\n  it('should handle agent without states', async () => {\n    const definition: Agent = {\n      name: 'stateless-agent',\n      version: '1.0.0',\n      description: 'Agent without state management',\n      category: 'basic'\n    };\n    \n    const agent = new YamlAgent(definition, toolExecutor);\n    await agent.initialize();\n    \n    expect(agent.state).toBe('initialized');\n  });\n\n  it('should handle agent without hooks', async () => {\n    const definition: Agent = {\n      name: 'hookless-agent',\n      version: '1.0.0',\n      description: 'Agent without hooks',\n      category: 'basic'\n    };\n    \n    const agent = new YamlAgent(definition, toolExecutor);\n    await agent.initialize();\n    \n    const result = await agent.execute('Task without hooks');\n    expect(result.success).toBe(true);\n  });\n});\n"