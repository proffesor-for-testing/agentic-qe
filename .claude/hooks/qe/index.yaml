# QE Hooks Registry
# Claude-Flow Integration Hooks for Quality Engineering

meta:
  name: "QE Hooks Registry"
  version: "1.0.0"
  description: "Quality Engineering hooks for Claude-Flow integration"
  author: "Claude Code"
  created: "2025-01-15"
  updated: "2025-01-15"

# Hook definitions
hooks:
  pre-test:
    name: "QE Pre-Test Hook"
    description: "Handles test environment setup, validation, and preparation"
    file: "pre-test.js"
    type: "pre-execution"
    category: "testing"
    triggers:
      - "test-start"
      - "suite-start"
      - "environment-setup"
    capabilities:
      - "environment-setup"
      - "test-validation"
      - "data-initialization"
      - "service-coordination"
      - "monitoring-setup"
    parameters:
      testType:
        type: "string"
        enum: ["unit", "integration", "e2e", "performance"]
        default: "unit"
        description: "Type of test to prepare for"
      testSuite:
        type: "string"
        default: "default"
        description: "Test suite identifier"
      environment:
        type: "string"
        default: "test"
        description: "Target environment"
      config:
        type: "object"
        description: "Additional configuration"
      sessionId:
        type: "string"
        description: "Test session identifier"
    outputs:
      success: "boolean"
      context: "object"
      timestamp: "string"
    dependencies:
      - "session-manager"

  post-test:
    name: "QE Post-Test Hook"
    description: "Handles test result analysis, reporting, and cleanup"
    file: "post-test.js"
    type: "post-execution"
    category: "testing"
    triggers:
      - "test-end"
      - "suite-end"
      - "test-complete"
    capabilities:
      - "result-analysis"
      - "coverage-analysis"
      - "report-generation"
      - "trend-analysis"
      - "cleanup"
      - "notification"
    parameters:
      sessionId:
        type: "string"
        description: "Test session identifier"
      testType:
        type: "string"
        enum: ["unit", "integration", "e2e", "performance"]
        description: "Type of test completed"
      testResults:
        type: "object"
        description: "Test execution results"
      config:
        type: "object"
        description: "Analysis configuration"
    outputs:
      success: "boolean"
      context: "object"
      summary: "object"
      timestamp: "string"
    dependencies:
      - "session-manager"

  quality-gates:
    name: "QE Quality Gates Hook"
    description: "Enforces quality standards and gates for CI/CD pipeline"
    file: "quality-gates.js"
    type: "validation"
    category: "quality-assurance"
    triggers:
      - "pipeline-gate"
      - "quality-check"
      - "deployment-gate"
    capabilities:
      - "coverage-validation"
      - "reliability-check"
      - "performance-validation"
      - "security-scanning"
      - "quality-enforcement"
      - "pipeline-integration"
    parameters:
      sessionId:
        type: "string"
        description: "Quality gate session identifier"
      environment:
        type: "string"
        default: "test"
        description: "Target environment"
      pipeline:
        type: "string"
        description: "CI/CD pipeline identifier"
      config:
        type: "object"
        description: "Quality gate configuration"
    outputs:
      success: "boolean"
      results: "object"
      summary: "object"
      timestamp: "string"
    dependencies:
      - "post-test"

  session-manager:
    name: "QE Session Manager Hook"
    description: "Manages QE test sessions, coordination, and state persistence"
    file: "session-manager.js"
    type: "orchestration"
    category: "coordination"
    triggers:
      - "session-create"
      - "session-update"
      - "session-delete"
      - "agent-coordination"
    capabilities:
      - "session-management"
      - "state-persistence"
      - "agent-coordination"
      - "swarm-orchestration"
      - "cleanup-automation"
      - "export-import"
    parameters:
      command:
        type: "string"
        enum: ["create", "get", "update", "delete", "list", "status", "cleanup", "export", "import", "coordinate"]
        default: "status"
        description: "Session management command"
      sessionId:
        type: "string"
        description: "Session identifier"
      sessionData:
        type: "object"
        description: "Session data"
      config:
        type: "object"
        description: "Session manager configuration"
    outputs:
      success: "boolean"
      result: "object"
      timestamp: "string"
    dependencies: []

# Workflow definitions
workflows:
  complete-test-cycle:
    name: "Complete QE Test Cycle"
    description: "Full test execution workflow with quality gates"
    hooks:
      - name: "session-manager"
        stage: "setup"
        parameters:
          command: "create"
          sessionData:
            type: "{{testType}}"
            suite: "{{testSuite}}"
      - name: "pre-test"
        stage: "preparation"
        parameters:
          testType: "{{testType}}"
          testSuite: "{{testSuite}}"
          sessionId: "{{session.sessionId}}"
      - name: "post-test"
        stage: "analysis"
        parameters:
          sessionId: "{{session.sessionId}}"
      - name: "quality-gates"
        stage: "validation"
        parameters:
          sessionId: "{{session.sessionId}}"
      - name: "session-manager"
        stage: "cleanup"
        parameters:
          command: "update"
          sessionId: "{{session.sessionId}}"
          sessionData:
            status: "completed"

  tdd-workflow:
    name: "Test-Driven Development Workflow"
    description: "TDD workflow with continuous quality monitoring"
    hooks:
      - name: "session-manager"
        stage: "init"
        parameters:
          command: "create"
          sessionData:
            type: "unit"
            methodology: "tdd"
      - name: "pre-test"
        stage: "setup"
        parameters:
          testType: "unit"
          config:
            tdd: true
            failFast: true
      - name: "post-test"
        stage: "feedback"
        parameters:
          config:
            generateRecommendations: true
            trackTrends: true

  ci-cd-integration:
    name: "CI/CD Pipeline Integration"
    description: "Quality gates integration for CI/CD pipelines"
    hooks:
      - name: "quality-gates"
        stage: "gate"
        parameters:
          environment: "{{pipeline.environment}}"
          pipeline: "{{pipeline.id}}"
          config:
            enforceAll: true
            failOnWarnings: false
      - name: "session-manager"
        stage: "coordination"
        parameters:
          command: "coordinate"
          sessionId: "{{pipeline.sessionId}}"

# Integration patterns
integrations:
  claude-flow:
    description: "Claude-Flow swarm orchestration integration"
    hooks:
      - "session-manager"
    commands:
      init: "npx claude-flow@alpha hooks qe --hook session-manager --command create"
      coordinate: "npx claude-flow@alpha hooks qe --hook session-manager --command coordinate"
      status: "npx claude-flow@alpha hooks qe --hook session-manager --command status"

  sparc-methodology:
    description: "SPARC methodology integration"
    hooks:
      - "pre-test"
      - "post-test"
    phases:
      specification: "pre-test with requirements validation"
      pseudocode: "pre-test with algorithm validation"
      architecture: "pre-test with system validation"
      refinement: "post-test with quality analysis"
      completion: "quality-gates with final validation"

  testing-frameworks:
    description: "Testing framework integration"
    supported:
      - jest
      - mocha
      - vitest
      - cypress
      - playwright
    hooks:
      - "pre-test"
      - "post-test"

# Configuration templates
templates:
  unit-testing:
    description: "Unit testing configuration"
    config:
      testType: "unit"
      coverage:
        enabled: true
        thresholds:
          statements: 80
          branches: 75
          functions: 80
          lines: 80
      quality:
        passRate: 95
        maxDuration: 60000

  integration-testing:
    description: "Integration testing configuration"
    config:
      testType: "integration"
      services:
        database: true
        mocks: true
      coverage:
        enabled: true
        thresholds:
          statements: 70
          branches: 65
      quality:
        passRate: 90
        maxDuration: 300000

  e2e-testing:
    description: "End-to-end testing configuration"
    config:
      testType: "e2e"
      browser: true
      services: true
      coverage:
        enabled: false
      quality:
        passRate: 85
        maxDuration: 600000

  performance-testing:
    description: "Performance testing configuration"
    config:
      testType: "performance"
      metrics:
        memory: true
        cpu: true
        duration: true
      thresholds:
        maxDuration: 300000
        maxMemory: 512
      quality:
        passRate: 80

# Usage examples
examples:
  basic-usage:
    description: "Basic hook usage"
    commands:
      - "node .claude/hooks/qe/pre-test.js --testType unit --testSuite core"
      - "node .claude/hooks/qe/post-test.js --sessionId qe-123"
      - "node .claude/hooks/qe/quality-gates.js --environment production"

  workflow-execution:
    description: "Complete workflow execution"
    commands:
      - "npx claude-flow@alpha hooks qe --workflow complete-test-cycle --testType unit"
      - "npx claude-flow@alpha hooks qe --workflow tdd-workflow"

  ci-cd-integration:
    description: "CI/CD pipeline integration"
    github-actions: |
      - name: QE Quality Gates
        run: |
          node .claude/hooks/qe/quality-gates.js \
            --environment ${{ github.event.deployment.environment }} \
            --pipeline ${{ github.run_id }}

    jenkins: |
      stage('Quality Gates') {
        steps {
          sh '''
            node .claude/hooks/qe/quality-gates.js \
              --environment ${ENV} \
              --pipeline ${BUILD_ID}
          '''
        }
      }

# Hook execution order
execution-order:
  test-cycle:
    - session-manager (create)
    - pre-test
    - [test execution]
    - post-test
    - quality-gates
    - session-manager (cleanup)

  continuous-integration:
    - quality-gates (pre-deployment)
    - [deployment]
    - quality-gates (post-deployment)

# Error handling
error-handling:
  retry-policy:
    max-retries: 3
    retry-delay: 1000
    exponential-backoff: true

  fallback-behavior:
    on-hook-failure: "continue-with-warning"
    on-critical-failure: "abort-workflow"

  notification:
    channels: ["console", "claude-flow-memory"]
    levels: ["error", "warning", "info"]

# Performance considerations
performance:
  timeouts:
    pre-test: 120000    # 2 minutes
    post-test: 180000   # 3 minutes
    quality-gates: 300000  # 5 minutes
    session-manager: 60000  # 1 minute

  concurrency:
    max-parallel-hooks: 4
    agent-coordination: true

  caching:
    session-data: true
    test-results: true
    coverage-data: true

# Security considerations
security:
  permissions:
    file-system: "read-write"
    network: "limited"
    process: "spawn-children"

  sanitization:
    input-validation: true
    output-encoding: true
    command-injection-prevention: true

  secrets:
    environment-variables: true
    secure-storage: "claude-flow-memory"

# Monitoring and observability
monitoring:
  metrics:
    - hook-execution-time
    - hook-success-rate
    - test-pass-rate
    - coverage-percentage
    - quality-gate-violations

  logging:
    level: "info"
    format: "json"
    output: ["console", "file"]

  alerts:
    conditions:
      - "hook-failure-rate > 10%"
      - "test-pass-rate < 90%"
      - "coverage < 80%"
    channels: ["console", "claude-flow-notify"]